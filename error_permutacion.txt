Tarea_2/EsPermutacion.java:45: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
            maintaining r == (\sum int j; 0 <= j && j < i && S[j] == E; 1);
                              ^
Tarea_2/EsPermutacion.java:45: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
            maintaining r == (\sum int j; 0 <= j && j < i && S[j] == E; 1);
                              ^
Tarea_2/EsPermutacion.java:45: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
            maintaining r == (\sum int j; 0 <= j && j < i && S[j] == E; 1);
                              ^
Tarea_2/EsPermutacion.java:45: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
            maintaining r == (\sum int j; 0 <= j && j < i && S[j] == E; 1);
                              ^
Tarea_2/EsPermutacion.java:37: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        ensures \result == (\sum int i; 0 <= i && i < S.length && S[i] == E; 1);
                            ^
Tarea_2/EsPermutacion.java:45: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method cuentaElementoPosicion
            maintaining r == (\sum int j; 0 <= j && j < i && S[j] == E; 1);
            ^
Tarea_2/EsPermutacion.java:45: verify: The prover cannot establish an assertion (LoopInvariant) in method cuentaElementoPosicion
            maintaining r == (\sum int j; 0 <= j && j < i && S[j] == E; 1);
            ^
Tarea_2/EsPermutacion.java:55: verify: The prover cannot establish an assertion (Postcondition: Tarea_2/EsPermutacion.java:37:) in method cuentaElementoPosicion
        return r;
        ^
Tarea_2/EsPermutacion.java:37: verify: Associated declaration: Tarea_2/EsPermutacion.java:55:
        ensures \result == (\sum int i; 0 <= i && i < S.length && S[i] == E; 1);
        ^
Tarea_2/EsPermutacion.java:37: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        ensures \result == (\sum int i; 0 <= i && i < S.length && S[i] == E; 1);
                            ^
Tarea_2/EsPermutacion.java:37: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        ensures \result == (\sum int i; 0 <= i && i < S.length && S[i] == E; 1);
                            ^
Tarea_2/EsPermutacion.java:10: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        ensures \result == (\forall int z; (\sum int i; 0 <= i && i < S1.length && S1[i] == z; 1) == (\sum int i; 0 <= i && i < S2.length && S2[i] == z ;1));
                                            ^
Tarea_2/EsPermutacion.java:10: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        ensures \result == (\forall int z; (\sum int i; 0 <= i && i < S1.length && S1[i] == z; 1) == (\sum int i; 0 <= i && i < S2.length && S2[i] == z ;1));
                                                                                                      ^
Tarea_2/EsPermutacion.java:32: verify: The prover cannot establish an assertion (Postcondition: Tarea_2/EsPermutacion.java:10:) in method esPermutacion
        return true;
        ^
Tarea_2/EsPermutacion.java:10: verify: Associated declaration: Tarea_2/EsPermutacion.java:32:
        ensures \result == (\forall int z; (\sum int i; 0 <= i && i < S1.length && S1[i] == z; 1) == (\sum int i; 0 <= i && i < S2.length && S2[i] == z ;1));
        ^
9 warnings
6 verification failures
