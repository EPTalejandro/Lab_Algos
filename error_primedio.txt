Tarea_2/PromedioPares.java:5: warning: A refining statement is required for statement specifications
        //@ requires secuencia != null;
            ^
Tarea_2/PromedioPares.java:8: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ ensures \result == (\sum int i; 0 <= i < secuencia.length && secuencia[i] % 2 == 0; secuencia[i]) / (\sum int i; 0 <= i < secuencia.length && secuencia[i] % 2 == 0 ; 1);
                                ^
Tarea_2/PromedioPares.java:8: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ ensures \result == (\sum int i; 0 <= i < secuencia.length && secuencia[i] % 2 == 0; secuencia[i]) / (\sum int i; 0 <= i < secuencia.length && secuencia[i] % 2 == 0 ; 1);
                                                                                                                 ^
Tarea_2/PromedioPares.java:14: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining suma == (\sum int j; 0 <= j < i && secuencia[j] % 2 == 0; secuencia[j]);
                                 ^
Tarea_2/PromedioPares.java:15: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining pares == (\sum int j; 0 <= j < i && secuencia[j] % 2 == 0; 1);
                                  ^
Tarea_2/PromedioPares.java:14: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining suma == (\sum int j; 0 <= j < i && secuencia[j] % 2 == 0; secuencia[j]);
                                 ^
Tarea_2/PromedioPares.java:15: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining pares == (\sum int j; 0 <= j < i && secuencia[j] % 2 == 0; 1);
                                  ^
Tarea_2/PromedioPares.java:14: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining suma == (\sum int j; 0 <= j < i && secuencia[j] % 2 == 0; secuencia[j]);
                                 ^
Tarea_2/PromedioPares.java:15: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining pares == (\sum int j; 0 <= j < i && secuencia[j] % 2 == 0; 1);
                                  ^
Tarea_2/PromedioPares.java:14: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining suma == (\sum int j; 0 <= j < i && secuencia[j] % 2 == 0; secuencia[j]);
                                 ^
Tarea_2/PromedioPares.java:15: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining pares == (\sum int j; 0 <= j < i && secuencia[j] % 2 == 0; 1);
                                  ^
Tarea_2/PromedioPares.java:15: verify: The prover cannot establish an assertion (LoopInvariant) in method promedioPares
        //@ maintaining pares == (\sum int j; 0 <= j < i && secuencia[j] % 2 == 0; 1);
            ^
Tarea_2/PromedioPares.java:13: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method promedioPares
        //@ maintaining 0 <= i < secuencia.length;
            ^
Tarea_2/PromedioPares.java:8: verify: The prover cannot establish an assertion (UndefinedDivideByZero) in method promedioPares
        //@ ensures \result == (\sum int i; 0 <= i < secuencia.length && secuencia[i] % 2 == 0; secuencia[i]) / (\sum int i; 0 <= i < secuencia.length && secuencia[i] % 2 == 0 ; 1);
                                                                                                              ^
Tarea_2/PromedioPares.java:14: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method promedioPares
        //@ maintaining suma == (\sum int j; 0 <= j < i && secuencia[j] % 2 == 0; secuencia[j]);
            ^
Tarea_2/PromedioPares.java:15: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method promedioPares
        //@ maintaining pares == (\sum int j; 0 <= j < i && secuencia[j] % 2 == 0; 1);
            ^
Tarea_2/PromedioPares.java:14: verify: The prover cannot establish an assertion (LoopInvariant) in method promedioPares
        //@ maintaining suma == (\sum int j; 0 <= j < i && secuencia[j] % 2 == 0; secuencia[j]);
            ^
Tarea_2/PromedioPares.java:18: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method promedioPares: overflow in int sum
                suma = suma + secuencia[i];
                            ^
Tarea_2/PromedioPares.java:18: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method promedioPares: underflow in int sum
                suma = suma + secuencia[i];
                            ^
Tarea_2/PromedioPares.java:13: verify: The prover cannot establish an assertion (LoopInvariant) in method promedioPares
        //@ maintaining 0 <= i < secuencia.length;
            ^
Tarea_2/PromedioPares.java:19: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method promedioPares: overflow in int sum
                pares = pares + 1;
                              ^
Tarea_2/PromedioPares.java:8: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ ensures \result == (\sum int i; 0 <= i < secuencia.length && secuencia[i] % 2 == 0; secuencia[i]) / (\sum int i; 0 <= i < secuencia.length && secuencia[i] % 2 == 0 ; 1);
                                ^
Tarea_2/PromedioPares.java:8: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ ensures \result == (\sum int i; 0 <= i < secuencia.length && secuencia[i] % 2 == 0; secuencia[i]) / (\sum int i; 0 <= i < secuencia.length && secuencia[i] % 2 == 0 ; 1);
                                                                                                                 ^
Tarea_2/PromedioPares.java:8: verify: The prover cannot establish an assertion (Postcondition) in method promedioPares
        //@ ensures \result == (\sum int i; 0 <= i < secuencia.length && secuencia[i] % 2 == 0; secuencia[i]) / (\sum int i; 0 <= i < secuencia.length && secuencia[i] % 2 == 0 ; 1);
            ^
Tarea_2/PromedioPares.java:8: verify: The prover cannot establish an assertion (UndefinedDivideByZero) in method promedioPares
        //@ ensures \result == (\sum int i; 0 <= i < secuencia.length && secuencia[i] % 2 == 0; secuencia[i]) / (\sum int i; 0 <= i < secuencia.length && secuencia[i] % 2 == 0 ; 1);
                                                                                                              ^
Tarea_2/PromedioPares.java:7: verify: The prover cannot establish an assertion (Postcondition) in method promedioPares
        //@ ensures \result == 0 <==> (\forall int i; 0 <= i < secuencia.length; secuencia[i] % 2 !=0); 
            ^
13 warnings
13 verification failures
Tarea_2/PromedioPares.java:14: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining suma == \sum int j; 0 <= j < i && secuencia[j] % 2 == 0; secuencia[j];
                                ^
Tarea_2/PromedioPares.java:15: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining pares == \sum int j; 0 <= j < i && secuencia[j] % 2 == 0; 1;
                                 ^
Tarea_2/PromedioPares.java:14: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining suma == \sum int j; 0 <= j < i && secuencia[j] % 2 == 0; secuencia[j];
                                ^
Tarea_2/PromedioPares.java:15: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining pares == \sum int j; 0 <= j < i && secuencia[j] % 2 == 0; 1;
                                 ^
Tarea_2/PromedioPares.java:14: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining suma == \sum int j; 0 <= j < i && secuencia[j] % 2 == 0; secuencia[j];
                                ^
Tarea_2/PromedioPares.java:15: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining pares == \sum int j; 0 <= j < i && secuencia[j] % 2 == 0; 1;
                                 ^
Tarea_2/PromedioPares.java:14: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining suma == \sum int j; 0 <= j < i && secuencia[j] % 2 == 0; secuencia[j];
                                ^
Tarea_2/PromedioPares.java:15: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining pares == \sum int j; 0 <= j < i && secuencia[j] % 2 == 0; 1;
                                 ^
Tarea_2/PromedioPares.java:6: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
    //@ ensures \result == (\sum int i; 0 <= i < secuencia.length && secuencia[i] % 2 == 0; secuencia[i]) / (\sum int i; 0 <= i < secuencia.length && secuencia[i] % 2 == 0 ; 1);
                            ^
Tarea_2/PromedioPares.java:6: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
    //@ ensures \result == (\sum int i; 0 <= i < secuencia.length && secuencia[i] % 2 == 0; secuencia[i]) / (\sum int i; 0 <= i < secuencia.length && secuencia[i] % 2 == 0 ; 1);
                                                                                                             ^
Tarea_2/PromedioPares.java:15: verify: The prover cannot establish an assertion (LoopInvariant) in method promedioPares
        //@ maintaining pares == \sum int j; 0 <= j < i && secuencia[j] % 2 == 0; 1;
            ^
Tarea_2/PromedioPares.java:15: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method promedioPares
        //@ maintaining pares == \sum int j; 0 <= j < i && secuencia[j] % 2 == 0; 1;
            ^
Tarea_2/PromedioPares.java:14: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method promedioPares
        //@ maintaining suma == \sum int j; 0 <= j < i && secuencia[j] % 2 == 0; secuencia[j];
            ^
Tarea_2/PromedioPares.java:13: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method promedioPares
        //@ maintaining 0 <= i < secuencia.length;
            ^
Tarea_2/PromedioPares.java:18: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method promedioPares: overflow in int sum
                suma = suma + secuencia[i];
                            ^
Tarea_2/PromedioPares.java:19: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method promedioPares: overflow in int sum
                pares = pares + 1;
                              ^
Tarea_2/PromedioPares.java:14: verify: The prover cannot establish an assertion (LoopInvariant) in method promedioPares
        //@ maintaining suma == \sum int j; 0 <= j < i && secuencia[j] % 2 == 0; secuencia[j];
            ^
Tarea_2/PromedioPares.java:13: verify: The prover cannot establish an assertion (LoopInvariant) in method promedioPares
        //@ maintaining 0 <= i < secuencia.length;
            ^
10 warnings
8 verification failures
